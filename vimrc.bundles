" =======================
" Vundle插件管理及配置列表
" =======================

"==========初始化==========

set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'


"==========基础==========

" 多语言语法检查
Plugin 'vim-syntastic/syntastic'
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0


"==========Language-format==========

" Clang-format
Plugin 'rhysd/vim-clang-format'
let g:clang_format#code_style = "google"
let g:clang_format#style_options = {
			\ "Language" : "Cpp",
            \ "Standard" : "C++11",
			\ "IndentWidth" : 4,
            \ "AccessModifierOffset" : -2,
			\ "AllowShortLoopsOnASingleLine" : "false",
            \ "AllowShortIfStatementsOnASingleLine" : "false",
			\ "AllowShortCaseLabelsOnASingleLine" :	"false",
			\ "AllowShortFunctionsOnASingleLine" : "Empty",
			\ "BinPackArguments" : "true",
			\ "BinPackParameters" : "true",
			\ "ColumnLimit" : 80,
			\ "MaxEmptyLinesToKeep" : 1,
			\ "TabWidth" : 4,
			\ "UseTab" : "Never"}
" map to <Leader>ff in C++ code
autocmd FileType c,cpp,objc nnoremap <buffer><Leader>ff :<C-u>ClangFormat<CR>
autocmd FileType c,cpp,objc vnoremap <buffer><Leader>ff :ClangFormat<CR>
autocmd FileType c,cpp,objc ClangFormatAutoEnable
autocmd FileType c,cpp,objc autocmd BufWrite *: Autoformat

" Python-format
Plugin 'psf/black'
" Editor integration:
" https://black.readthedocs.io/en/stable/integrations/editors.html
let g:black_virtualenv = '~/.vim/black'
augroup black_on_save
    autocmd!
    autocmd BufWritePre *.py Black
augroup end

"==========快速编码==========

" 快速注释: [count]<leader>cc | [count]<leader>cu
Plugin 'preservim/nerdcommenter'
" 快速去行尾空格 [, + <Space>]
Plugin 'bronson/vim-trailing-whitespace'
map <leader><space> :FixWhitespace<cr>
" 快速赋值语句对齐
Plugin 'godlygeek/tabular'
nmap <Leader>a= :Tabularize /=<CR>
vmap <Leader>a= :Tabularize /=<CR>
" :号也对齐
nmap <Leader>a: :Tabularize /:<CR>
vmap <Leader>a: :Tabularize /:<CR>


"==========功能相关==========

" 更高效的移动 [,, + w/fx]
Plugin 'easymotion/vim-easymotion'

" 文件搜索
Plugin 'ctrlpvim/ctrlp.vim'
let g:ctrlp_map = '<leader>p'
let g:ctrlp_cmd = 'CtrlP'
map <leader>f :CtrlPMRU<CR>
" set wildignore+=*/tmp/*,*.so,*.swp,*.zip     " MacOSX/Linux"
let g:ctrlp_custom_ignore = {
    \ 'dir':  '\v[\/]\.(git|hg|svn|rvm)$',
    \ 'file': '\v\.(exe|so|dll|zip|tar|tar.gz)$',
    \ }
"\ 'link': 'SOME_BAD_SYMBOLIC_LINKS',
let g:ctrlp_working_path_mode=0
let g:ctrlp_match_window_bottom=1
let g:ctrlp_max_height=15
let g:ctrlp_match_window_reversed=0
let g:ctrlp_mruf_max=500
let g:ctrlp_follow_symlinks=1

" ctrlp插件 - 不用ctag进行函数快速跳转
Plugin 'tacahiroy/ctrlp-funky'
nnoremap <Leader>fu :CtrlPFunky<Cr>
" narrow the list down with a word under cursor
nnoremap <Leader>fU :execute 'CtrlPFunky ' . expand('<cword>')<Cr>
let g:ctrlp_funky_syntax_highlight = 1

let g:ctrlp_extensions = ['funky']

" plugin on GitHub repo
Plugin 'tpope/vim-fugitive'


"==========显示增强==========

" 括号显示增强
Plugin 'kien/rainbow_parentheses.vim'
let g:rbpt_colorpairs = [
    \ ['brown',       'RoyalBlue3'],
    \ ['Darkblue',    'SeaGreen3'],
    \ ['darkgray',    'DarkOrchid3'],
    \ ['darkgreen',   'firebrick3'],
    \ ['darkcyan',    'RoyalBlue3'],
    \ ['darkred',     'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['brown',       'firebrick3'],
    \ ['gray',        'RoyalBlue3'],
    \ ['black',       'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['Darkblue',    'firebrick3'],
    \ ['darkgreen',   'RoyalBlue3'],
    \ ['darkcyan',    'SeaGreen3'],
    \ ['darkred',     'DarkOrchid3'],
    \ ['red',         'firebrick3'],
    \ ]
let g:rbpt_max = 40
let g:rbpt_loadcmd_toggle = 0
au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces

" 状态栏插件
Plugin 'itchyny/lightline.vim'
set laststatus=2
let g:lightline = {
            \ 'colorscheme': 'wombat',
            \ }
set noshowmode

" 增加缩进虚线
Plugin 'Yggdroot/indentLine'


"==========完成配置==========

" All of your Plugins must be added before the following line
call vundle#end()           " required
filetype plugin indent on	" required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line


"END -2024.04.10
